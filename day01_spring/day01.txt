프레임워크란?
	뼈대나 근간을 이루는 코드들의 묶음.
	개발자는 각 개개인의 능력차이가 큰 직종이고, 개발자 구성에 따라 프로젝트 결과 역시
	큰 차이를 낳는다. 이런 상황을 극복하기 위한 코드의 결과물이 바로 프레임워크이다.
	프로그램의 기본 흐름이나 구조를 정하고 모든 팀원이 이 구조에 자신의 코드를
	추가하는 방식으로 개발하게 된다.

프레임워크의 장점
	개발에 필요한 구조를 이미 코드로 만들어 놓았기 때문에, 실력이 부족한 개발자라
	하더라도 반쯤 완성한 상태에서 필요한 부분을 조립하는 형태의 개발이 가능하다.
	회사 입장에서는 프레임워크를 사용하면 일정한 품질이 보장되는 결과물을 얻을 수 있고,
	개발자 입장에서는 완성된 구조에 자신이 맡은 코드를 개발해서 넣기 때문에 개발 시간을
	단축할 수 있다.

스프링 프레임워크란?
	경량 프레임워크(light-weight).
	예전 프레임워크는 다양한 경우를 처리할 수 있는 다양한 기능을 가지도록 만들다보니
	하나의 기능을 위해서 너무 많은 구조가 필요했다.
	기술이 너무나 복잡하고 방대했기 때문에, 전체를 이해하고 개발하기에는 어려움이 많았다.
	그래서 스프링 프레임워크가 등장했고, 특정 기능을 위주로 간단한 jar파일 등을 이용해서
	모든 개발이 가능하도록 구성되어 있다.

스프링 프레임워크의 장점
	- 복잡함에 반기를 들어서 만들어진 프레임워크(경량화)
	- 프로젝트 전체 구조를 설계할 때 유용한 프레임워크
	- 다른 프레임워크들의 포용(여러 프레임워크를 혼용해서 사용가능)
	- 개발 생산성과 개발도구의 지원

스프링 프레임워크의 특징
	- POJO 기반의 구성
	- 의존성 주입(DI)을 통한 객체 간의 관계 구성
	- AOP(Aspect-Oriented-Programming) 지원
	- 트랜잭션 관리
	- 편리한 MVC 구조
	- WAS에 종속적이지 않은 개발 환경
===============================================================================
[POJO 기반의 구성] - Plain Old Java Object
	오래된 방식의 간단한 자바 객체라는 의미이며, Java 코드에서 일반적으로 객체를 구성하는 방식을
	스프링 프레임워크에서 그대로 사용할 수 있다는 말이다.

[의존성 주입(DI)을 통한 객체 간의 관계 구성] - Dependency Injection
	의존성(Dependency)이란 하나의 객체가 다른 객체 없이 제대로 된 역할을 할 수 없다는 것을 의미한다.
	예를 들어 A객체가 B객체 없이 동작이 불가능한 상황을 'A가 B에 의존적이다'라고 표현한다.

	주입(Injection)은 말 그대로 외부에서 밀어 넣는 것을 의미한다.
	예를 들어 어떤 객체가 필요한 객체를 외부에서 밀어 넣는 것을 의미한다.
	주입을 받는 입장에서는 어떤 객체인지 신경 쓸 필요가 없고 어떤 객체에 의존하든지 자신의
	역할은 변하지 않게 된다.


	**의존
	ⓐ →→→→→→→→→→→→→ ⓑ
	a객체에서 b객체를 직접 생성

	**의존성 주입
	ⓐ ↔↔↔↔↔↔???←←←←←← ⓑ
	a는 b가 필요하다는 신호만 보내고, b객체를 주입하는 것은 외부에서 이루어짐

	의존성 주입방식을 사용하기 위해서는 ???라는 존재가 필요하게 된다.
	스프링 프레임워크에서는 ApplicationContext가 ???라는 존재이며,
	필요한 객체들을 생성하고, 필요한 객체들을 주입해주는 역할을 한다.
	따라서 개발자들은 기존의 프로그래밍과 달리 객체와 객체를 분리해서 생성하고,
	이러한 객체들을 엮는(wiring)작업의 형태로 개발하게 된다.

	ApplicationContext가 관리하는 객체들을 '빈(Bean)'이라 부르고, 빈과 빈 사이의
	의존 관계를 처리하는 방식으로 XML설정, 어노테이션 설정, JAVA 설정방식을 이용할 수 있다.

[AOP의 지원] - Aspect-Oriented-Programming
	관점 지향 프로그래밍
	좋은 개발환경에서는 개발자가 비지니스 로직에만 집중할 수 있게 한다.
	스프링 프레임워크는 반복적인 코드를 제거해줌으로써
	핵심 비지니스 로직에만 집중할 수 있는 방법을 제공한다.
	
	보안이나 로그, 트랜잭션, 예외처리 등과 같이 비지니스 로직은 아니지만,
	반드시 처리가 필요한 부분을 횡단 관심사(cross-concern)이라고 한다.
	스프링 프레임워크는 이러한 횡단 관심사를 분리해서 제작하는 것이 가능하고
	횡단 관심사를 모듈로 분리하는 프로그래밍을 AOP라고 한다.
	이를 통해서 3가지의 이점이 생긴다.
		1) 핵심 비지니스 로직에만 집중하여 코드 개발
		2) 각 프로젝트마다 다른 관심사 적용 시 코드 수정 최소화
		3) 원하는 관심사의 유지보수가 수월한 코드 구성 가능

[트랜잭션의 지원]
	DB작업 시 트랜잭션 관리를 매번 상황에 맞게 코드로 작성하지 않고,
	어노테이션이나 XML로 트랜잭션 관리를 설정할 수 있다.
	
[단위 테스트]
	전체 Application을 실행하지 않아도 기능별 단위 테스트가 용이하기 때문에
	버그를 줄이고 개발 시간을 단축할 수 있다.

**스프링 부트
	스프링 프레임워크를 사용함에 있어서 초기 설정 및 필요한 라이브러리에 대한 설정의 어려움이 많으며,
	시간이 너무 많이 걸리기 때문에 자동설정(AutoConfiguration)과 개발에 필요한 모든 것을 관리해주는
	스프링 부트를 선호한다. 각 코어 및 라이브러리의 버전들도 맞추어 줘야하지만 스프링 부트를 사용하면
	이러한 복잡성을 해결하기에도 좋다.
========================================================================================
Intellij 설치
	구글에 intellij 검색 > 좌측 "기타 버전" 클릭 > Version 2020.1.1 선택
	> https://www.jetbrains.com/ko-kr/idea/download/other.html
	> Windows ZIP Archive(zip) 클릭 > resource에 압축 해제
	> bin 폴더 > idea64.exe 실행

프로젝트 생성(ex00)
	1) Create New Project > Spring Initializr > Project SDK java version 11 선택

	2)
	Group		: com.example
	Artifact	: ex00
	Type		: Maven Project
	Language	: JAVA
	Packaging	: Jar
	Java Version	: 11

	3)
	Developer Tools
	- Spring Boot DevTools
	- Lombok
	- Spring Configuration Processor

	4)
	Web
	- Spring Web
	- Spring Web Service

	5)
	Template Engines
	- Thymeleaf

	6)
	SQL
	- JDBC API
	- MyBatis Framework
	- Oracle Driver

	7)
	Project Name		: ex00
	Project Location	: workspace/ex00

프로젝트 기본 경로
	1) src/main/java	: 서버단 JAVA 파일
	2) test/main/java	: 단위 테스트 JAVA 파일
	3) src/main/resources	: 설정 파일 및 뷰단
	4) resources/static	: css, js 파일 경로
	5) resources/templates	: html 파일 경로
	6) pom.xml		: 라이브러리 의존성 관리
	7) application.properties : 서버 및 DB 설정 파일

환경 설정
	- 폰트 변경
		File > Settings > font 검색 > Editor/Font 클릭 > 폰트 변경 및 사이즈 조정

	- 단축키 변경
		File > Settings > Keymap 검색 > Eclipse로 변경

------------------------------------------------------------------------------------------
Qualifier
	@Autowired를 통해 객체를 주입할 때 같은 타입의 객체가 여러 개 있다면, 구분할 수 없다.
	이 때, @Qualifier를 통해 식별자를 부여하면 원하는 객체를 주입받을 수 있다.

	[1]
		@Qualifier("식별자")
		public class 클래스명 implements 인터페이스 {
			...
		}

	[2]
		@Autowired
		@Qualifier("식별자")
		private 인터페이스 객체;

[DI 실습]
	dependency package
	1. restaurant 클래스 선언
	2. chef 클래스 선언
	3. 의존 관계를 확립하고 생성자 주입 진행
	4. 단위 테스트를 통해 객체 확인

	qualifier package
	1. restaurant 인터페이스 선언
	2. steak 가격 선언, sidebar 이용 여부 선언
	3. outback 클래스 선언, restaurant 지정
	4. vips 클래스 선언, restaurant 지정
	5. vips가 default
	6. 단위 테스트를 통해 객체 확인

















